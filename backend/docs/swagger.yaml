definitions:
  dto.ActionResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dto.AssignRoleRequest:
    properties:
      role:
        type: string
      user_id:
        type: integer
    required:
    - role
    - user_id
    type: object
  dto.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.ChangePasswordRequest:
    properties:
      confirm_password:
        type: string
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - confirm_password
    - current_password
    - new_password
    type: object
  dto.CreateRoleRequest:
    properties:
      description:
        maxLength: 500
        type: string
      display_name:
        maxLength: 255
        minLength: 2
        type: string
      is_active:
        type: boolean
      name:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - display_name
    - name
    type: object
  dto.CreateUserRequest:
    properties:
      bio:
        type: string
      email:
        type: string
      first_name:
        type: string
      language:
        type: string
      last_name:
        type: string
      location:
        type: string
      password:
        minLength: 8
        type: string
      phone:
        type: string
      status:
        enum:
        - active
        - inactive
        - suspended
        - pending
        type: string
      timezone:
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
      website:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - status
    - username
    type: object
  dto.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.PaginatedActionResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.ActionResponse'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.PaginatedResourceResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.ResourceResponse'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.PermissionRequest:
    properties:
      action:
        type: string
      resource:
        type: string
      role:
        type: string
    required:
    - action
    - resource
    - role
    type: object
  dto.PermissionResponse:
    properties:
      action:
        type: string
      id:
        type: integer
      resource:
        type: string
      role:
        type: string
    type: object
  dto.PermissionsListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.PermissionResponse'
        type: array
      has_next:
        type: boolean
      has_prev:
        type: boolean
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  dto.ResourceResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dto.RoleResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      display_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      is_system:
        type: boolean
      name:
        type: string
      updated_at:
        type: string
    type: object
  dto.RolesListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.RoleResponse'
        type: array
      has_next:
        type: boolean
      has_prev:
        type: boolean
      page:
        type: integer
      page_size:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.UpdateProfileRequest:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      email:
        type: string
      first_name:
        type: string
      language:
        type: string
      last_name:
        type: string
      location:
        type: string
      phone:
        type: string
      timezone:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  dto.UpdateRoleRequest:
    properties:
      description:
        maxLength: 500
        type: string
      display_name:
        maxLength: 255
        minLength: 2
        type: string
      is_active:
        type: boolean
    type: object
  dto.UpdateUserRequest:
    properties:
      bio:
        type: string
      email:
        type: string
      first_name:
        type: string
      language:
        type: string
      last_name:
        type: string
      location:
        type: string
      phone:
        type: string
      status:
        enum:
        - active
        - inactive
        - suspended
        - pending
        type: string
      timezone:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  dto.UserResponse:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      first_name:
        type: string
      id:
        type: integer
      language:
        type: string
      last_login_at:
        type: string
      last_name:
        type: string
      location:
        type: string
      phone:
        type: string
      roles:
        items:
          type: string
        type: array
      status:
        type: string
      timezone:
        type: string
      updated_at:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: User login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Login with username and password
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: User registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - Auth
  /health:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check endpoint
      tags:
      - System
  /v1/me/permissions:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get current user permissions
      tags:
      - User
  /v1/profile:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - User
    put:
      consumes:
      - application/json
      parameters:
      - description: Profile update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update current user profile
      tags:
      - User
  /v1/profile/password:
    put:
      consumes:
      - application/json
      parameters:
      - description: Password change request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Change current user password
      tags:
      - User
  /v1/rbac/actions:
    get:
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PaginatedActionResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get paginated list of actions
      tags:
      - RBAC
  /v1/rbac/permissions:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Permission request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove permission from role
      tags:
      - RBAC
    get:
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      - description: Filter by role
        in: query
        name: role
        type: string
      - description: Filter by resource
        in: query
        name: resource
        type: string
      - description: Filter by action
        in: query
        name: action
        type: string
      - description: Sort field (role, resource, action)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PermissionsListResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List all permissions with pagination
      tags:
      - RBAC
    post:
      consumes:
      - application/json
      parameters:
      - description: Permission request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add permission to role
      tags:
      - RBAC
  /v1/rbac/resources:
    get:
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PaginatedResourceResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get paginated list of resources
      tags:
      - RBAC
  /v1/rbac/roles:
    get:
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      - description: Search by name or display name
        in: query
        name: search
        type: string
      - description: Filter by status (active, inactive)
        in: query
        name: status
        type: string
      - description: Filter by system roles
        in: query
        name: is_system
        type: boolean
      - description: Sort field (name, display_name, created_at)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RolesListResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List all roles with pagination
      tags:
      - RBAC
    post:
      consumes:
      - application/json
      parameters:
      - description: Role creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RoleResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - RBAC
  /v1/rbac/roles/{role_id}:
    get:
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RoleResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get role by ID
      tags:
      - RBAC
    put:
      consumes:
      - application/json
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      - description: Role update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RoleResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a role
      tags:
      - RBAC
  /v1/rbac/roles/{role}:
    delete:
      parameters:
      - description: Role name
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a role
      tags:
      - RBAC
  /v1/rbac/roles/{role}/permissions:
    get:
      parameters:
      - description: Role name
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get permissions for role
      tags:
      - RBAC
  /v1/rbac/roles/{role}/users:
    get:
      parameters:
      - description: Role name
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get users with specific role
      tags:
      - RBAC
  /v1/rbac/users/{user_id}/check-permission:
    get:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Resource name
        in: query
        name: resource
        required: true
        type: string
      - description: Action name
        in: query
        name: action
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Check user permission
      tags:
      - RBAC
  /v1/rbac/users/{user_id}/roles:
    get:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user roles
      tags:
      - RBAC
  /v1/rbac/users/assign-role:
    post:
      consumes:
      - application/json
      parameters:
      - description: Role assignment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Assign role to user
      tags:
      - RBAC
  /v1/rbac/users/remove-role:
    post:
      consumes:
      - application/json
      parameters:
      - description: Role removal request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove role from user
      tags:
      - RBAC
  /v1/users:
    get:
      parameters:
      - description: Search users by name or email
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all users (admin only)
      tags:
      - User
    post:
      consumes:
      - application/json
      parameters:
      - description: User creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new user (admin only)
      tags:
      - User
  /v1/users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete user by ID (admin only)
      tags:
      - User
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID (admin only)
      tags:
      - User
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user by ID (admin only)
      tags:
      - User
swagger: "2.0"
